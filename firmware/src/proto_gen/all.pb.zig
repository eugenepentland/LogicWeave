// Code generated by protoc-gen-zig
///! package all
const std = @import("std");
const Allocator = std.mem.Allocator;
const ArrayList = std.ArrayList;

const protobuf = @import("protobuf");
const ManagedString = protobuf.ManagedString;
const fd = protobuf.fd;
const ManagedStruct = protobuf.ManagedStruct;

pub const Mode = enum(i32) {
    input = 0,
    output = 1,
    pwm = 2,
    _,
};

pub const BankVoltage = enum(i32) {
    V1P8 = 0,
    V3P3 = 1,
    V5P0 = 2,
    _,
};

pub const UsbBootloaderRequest = struct {
    val: u32 = 0,

    pub const _desc_table = .{
        .val = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const Empty = struct {
    status: u32 = 0,

    pub const _desc_table = .{
        .status = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const EchoMessage = struct {
    message: ManagedString = .Empty,

    pub const _desc_table = .{
        .message = fd(1, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const GetStatusRequest = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const GPIOReadRequest = struct {
    gpio_pin: u32 = 0,

    pub const _desc_table = .{
        .gpio_pin = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const GPIOReadResponse = struct {
    state: bool = false,

    pub const _desc_table = .{
        .state = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const GPIOWriteRequest = struct {
    gpio_pin: u32 = 0,
    state: bool = false,

    pub const _desc_table = .{
        .gpio_pin = fd(1, .{ .Varint = .Simple }),
        .state = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const SPISetupRequest = struct {
    sclk_pin: u32 = 0,
    mosi_pin: u32 = 0,
    miso_pin: u32 = 0,
    instance_num: u32 = 0,
    baud_rate: u32 = 0,

    pub const _desc_table = .{
        .sclk_pin = fd(2, .{ .Varint = .Simple }),
        .mosi_pin = fd(3, .{ .Varint = .Simple }),
        .miso_pin = fd(4, .{ .Varint = .Simple }),
        .instance_num = fd(5, .{ .Varint = .Simple }),
        .baud_rate = fd(6, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const SPIWriteRequest = struct {
    instance_num: u32 = 0,
    data: ManagedString = .Empty,
    cs_pin: u32 = 0,

    pub const _desc_table = .{
        .instance_num = fd(1, .{ .Varint = .Simple }),
        .data = fd(2, .Bytes),
        .cs_pin = fd(3, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const SoftSPIWriteRequest = struct {
    cs_pin: u32 = 0,
    sclk_pin: u32 = 0,
    mosi_pin: u32 = 0,
    data: ManagedString = .Empty,

    pub const _desc_table = .{
        .cs_pin = fd(1, .{ .Varint = .Simple }),
        .sclk_pin = fd(2, .{ .Varint = .Simple }),
        .mosi_pin = fd(3, .{ .Varint = .Simple }),
        .data = fd(4, .Bytes),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const SPIReadRequest = struct {
    instance_num: u32 = 0,
    data: u32 = 0,
    cs_pin: u32 = 0,
    byte_count: u32 = 0,

    pub const _desc_table = .{
        .instance_num = fd(1, .{ .Varint = .Simple }),
        .data = fd(2, .{ .Varint = .Simple }),
        .cs_pin = fd(3, .{ .Varint = .Simple }),
        .byte_count = fd(4, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const SPIReadResponse = struct {
    data: ManagedString = .Empty,

    pub const _desc_table = .{
        .data = fd(1, .Bytes),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const I2CSetupRequest = struct {
    sda_pin: u32 = 0,
    scl_pin: u32 = 0,
    instance_num: u32 = 0,

    pub const _desc_table = .{
        .sda_pin = fd(1, .{ .Varint = .Simple }),
        .scl_pin = fd(2, .{ .Varint = .Simple }),
        .instance_num = fd(3, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const I2CWriteRequest = struct {
    instance_num: u32 = 0,
    data: ManagedString = .Empty,
    device_address: u32 = 0,

    pub const _desc_table = .{
        .instance_num = fd(1, .{ .Varint = .Simple }),
        .data = fd(2, .Bytes),
        .device_address = fd(3, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const I2CReadRequest = struct {
    instance_num: u32 = 0,
    data: ManagedString = .Empty,
    device_address: u32 = 0,
    byte_count: u32 = 0,

    pub const _desc_table = .{
        .instance_num = fd(1, .{ .Varint = .Simple }),
        .data = fd(2, .Bytes),
        .device_address = fd(3, .{ .Varint = .Simple }),
        .byte_count = fd(4, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const I2CReadResponse = struct {
    data: ManagedString = .Empty,

    pub const _desc_table = .{
        .data = fd(1, .Bytes),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const GPIOModeRequest = struct {
    gpio_pin: u32 = 0,
    mode: Mode = @enumFromInt(0),

    pub const _desc_table = .{
        .gpio_pin = fd(1, .{ .Varint = .Simple }),
        .mode = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ErrorResponse = struct {
    message: ManagedString = .Empty,

    pub const _desc_table = .{
        .message = fd(1, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const UsbPDReadRequest = struct {
    channel: u32 = 0,

    pub const _desc_table = .{
        .channel = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const UsbPDReadResponse = struct {
    measured_voltage_mv: u32 = 0,
    measured_current_ma: u32 = 0,
    requested_voltage_mv: u32 = 0,
    requested_current_ma: u32 = 0,
    on: bool = false,

    pub const _desc_table = .{
        .measured_voltage_mv = fd(1, .{ .Varint = .Simple }),
        .measured_current_ma = fd(2, .{ .Varint = .Simple }),
        .requested_voltage_mv = fd(3, .{ .Varint = .Simple }),
        .requested_current_ma = fd(4, .{ .Varint = .Simple }),
        .on = fd(5, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const UsbPDReadPDORequest = struct {
    channel: u32 = 0,
    index: u32 = 0,

    pub const _desc_table = .{
        .channel = fd(1, .{ .Varint = .Simple }),
        .index = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const UsbPDReadTemperatureRequest = struct {
    channel: u32 = 0,

    pub const _desc_table = .{
        .channel = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const UsbPDReadTemperatureResponse = struct {
    temperature_ch1_c: u32 = 0,
    temperature_ch2_c: u32 = 0,

    pub const _desc_table = .{
        .temperature_ch1_c = fd(1, .{ .Varint = .Simple }),
        .temperature_ch2_c = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const WriteTextRequest = struct {
    text: ManagedString = .Empty,
    x: u32 = 0,
    y: u32 = 0,

    pub const _desc_table = .{
        .text = fd(1, .String),
        .x = fd(2, .{ .Varint = .Simple }),
        .y = fd(3, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const UsbPDReadPDOResponse = struct {
    voltage_mv: u32 = 0,
    current_ma: u32 = 0,
    is_fixed: bool = false,
    voltage_mv_min: u32 = 0,

    pub const _desc_table = .{
        .voltage_mv = fd(1, .{ .Varint = .Simple }),
        .current_ma = fd(2, .{ .Varint = .Simple }),
        .is_fixed = fd(3, .{ .Varint = .Simple }),
        .voltage_mv_min = fd(4, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const UsbPDEnableRequest = struct {
    channel: u32 = 0,
    on: bool = false,

    pub const _desc_table = .{
        .channel = fd(1, .{ .Varint = .Simple }),
        .on = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ClearScreenRequest = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const RefreshScreenRequest = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const UsbPDWritePDORequest = struct {
    channel: u32 = 0,
    voltage_mv: u32 = 0,
    current_limit_ma: u32 = 0,

    pub const _desc_table = .{
        .channel = fd(1, .{ .Varint = .Simple }),
        .voltage_mv = fd(3, .{ .Varint = .Simple }),
        .current_limit_ma = fd(4, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FirmwareInfoRequest = struct {
    info: u32 = 0,

    pub const _desc_table = .{
        .info = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FirmwareInfoResponse = struct {
    hash: ManagedString = .Empty,
    version: ManagedString = .Empty,
    updated_at: ManagedString = .Empty,

    pub const _desc_table = .{
        .hash = fd(1, .String),
        .version = fd(2, .String),
        .updated_at = fd(3, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const WriteBankVoltageRequest = struct {
    bank: u32 = 0,
    voltage: BankVoltage = @enumFromInt(0),

    pub const _desc_table = .{
        .bank = fd(1, .{ .Varint = .Simple }),
        .voltage = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const AppMessage = struct {
    kind: ?kind_union,

    pub const _kind_case = enum {
        gpio_mode_request,
        emtpy,
        gpio_write_request,
        usb_bootloader_request,
        gpio_write_response,
        gpio_read_request,
        gpio_read_response,
        echo_message,
        usb_bootloader_response,
        error_response,
        i2c_setup_request,
        i2c_setup_response,
        i2c_write_request,
        i2c_write_response,
        i2c_read_request,
        i2c_read_response,
        spi_setup_request,
        spi_setup_response,
        spi_read_request,
        spi_read_response,
        spi_write_request,
        spi_write_response,
        usb_pd_read_request,
        usb_pd_read_response,
        usb_pd_read_pdo_request,
        usb_pd_read_pdo_response,
        usb_pd_write_pdo_request,
        write_text_request,
        write_text_response,
        usb_pd_enable_request,
        usb_pd_enable_response,
        clear_screen_request,
        clear_screen_response,
        refresh_screen_request,
        firmware_info_request,
        firmware_info_response,
        refresh_screen_response,
        usb_pd_write_pdo_response,
        soft_spi_write_request,
        soft_spi_write_response,
        gpio_mode_response,
        write_bank_voltage_request,
        write_bank_voltage_response,
        usb_pd_read_temperature_request,
        usb_pd_read_temperature_response,
    };
    pub const kind_union = union(_kind_case) {
        gpio_mode_request: GPIOModeRequest,
        emtpy: Empty,
        gpio_write_request: GPIOWriteRequest,
        usb_bootloader_request: UsbBootloaderRequest,
        gpio_write_response: Empty,
        gpio_read_request: GPIOReadRequest,
        gpio_read_response: GPIOReadResponse,
        echo_message: EchoMessage,
        usb_bootloader_response: Empty,
        error_response: ErrorResponse,
        i2c_setup_request: I2CSetupRequest,
        i2c_setup_response: Empty,
        i2c_write_request: I2CWriteRequest,
        i2c_write_response: Empty,
        i2c_read_request: I2CReadRequest,
        i2c_read_response: I2CReadResponse,
        spi_setup_request: SPISetupRequest,
        spi_setup_response: Empty,
        spi_read_request: SPIReadRequest,
        spi_read_response: SPIReadResponse,
        spi_write_request: SPIWriteRequest,
        spi_write_response: Empty,
        usb_pd_read_request: UsbPDReadRequest,
        usb_pd_read_response: UsbPDReadResponse,
        usb_pd_read_pdo_request: UsbPDReadPDORequest,
        usb_pd_read_pdo_response: UsbPDReadPDOResponse,
        usb_pd_write_pdo_request: UsbPDWritePDORequest,
        write_text_request: WriteTextRequest,
        write_text_response: Empty,
        usb_pd_enable_request: UsbPDEnableRequest,
        usb_pd_enable_response: Empty,
        clear_screen_request: ClearScreenRequest,
        clear_screen_response: Empty,
        refresh_screen_request: RefreshScreenRequest,
        firmware_info_request: FirmwareInfoRequest,
        firmware_info_response: FirmwareInfoResponse,
        refresh_screen_response: Empty,
        usb_pd_write_pdo_response: Empty,
        soft_spi_write_request: SoftSPIWriteRequest,
        soft_spi_write_response: Empty,
        gpio_mode_response: Empty,
        write_bank_voltage_request: WriteBankVoltageRequest,
        write_bank_voltage_response: Empty,
        usb_pd_read_temperature_request: UsbPDReadTemperatureRequest,
        usb_pd_read_temperature_response: UsbPDReadTemperatureResponse,
        pub const _union_desc = .{
            .gpio_mode_request = fd(1, .{ .SubMessage = {} }),
            .emtpy = fd(2, .{ .SubMessage = {} }),
            .gpio_write_request = fd(3, .{ .SubMessage = {} }),
            .usb_bootloader_request = fd(4, .{ .SubMessage = {} }),
            .gpio_write_response = fd(5, .{ .SubMessage = {} }),
            .gpio_read_request = fd(6, .{ .SubMessage = {} }),
            .gpio_read_response = fd(7, .{ .SubMessage = {} }),
            .echo_message = fd(8, .{ .SubMessage = {} }),
            .usb_bootloader_response = fd(9, .{ .SubMessage = {} }),
            .error_response = fd(10, .{ .SubMessage = {} }),
            .i2c_setup_request = fd(11, .{ .SubMessage = {} }),
            .i2c_setup_response = fd(12, .{ .SubMessage = {} }),
            .i2c_write_request = fd(13, .{ .SubMessage = {} }),
            .i2c_write_response = fd(14, .{ .SubMessage = {} }),
            .i2c_read_request = fd(15, .{ .SubMessage = {} }),
            .i2c_read_response = fd(16, .{ .SubMessage = {} }),
            .spi_setup_request = fd(17, .{ .SubMessage = {} }),
            .spi_setup_response = fd(18, .{ .SubMessage = {} }),
            .spi_read_request = fd(19, .{ .SubMessage = {} }),
            .spi_read_response = fd(20, .{ .SubMessage = {} }),
            .spi_write_request = fd(21, .{ .SubMessage = {} }),
            .spi_write_response = fd(22, .{ .SubMessage = {} }),
            .usb_pd_read_request = fd(23, .{ .SubMessage = {} }),
            .usb_pd_read_response = fd(24, .{ .SubMessage = {} }),
            .usb_pd_read_pdo_request = fd(25, .{ .SubMessage = {} }),
            .usb_pd_read_pdo_response = fd(26, .{ .SubMessage = {} }),
            .usb_pd_write_pdo_request = fd(27, .{ .SubMessage = {} }),
            .write_text_request = fd(29, .{ .SubMessage = {} }),
            .write_text_response = fd(30, .{ .SubMessage = {} }),
            .usb_pd_enable_request = fd(31, .{ .SubMessage = {} }),
            .usb_pd_enable_response = fd(32, .{ .SubMessage = {} }),
            .clear_screen_request = fd(28, .{ .SubMessage = {} }),
            .clear_screen_response = fd(34, .{ .SubMessage = {} }),
            .refresh_screen_request = fd(35, .{ .SubMessage = {} }),
            .firmware_info_request = fd(36, .{ .SubMessage = {} }),
            .firmware_info_response = fd(37, .{ .SubMessage = {} }),
            .refresh_screen_response = fd(38, .{ .SubMessage = {} }),
            .usb_pd_write_pdo_response = fd(39, .{ .SubMessage = {} }),
            .soft_spi_write_request = fd(40, .{ .SubMessage = {} }),
            .soft_spi_write_response = fd(41, .{ .SubMessage = {} }),
            .gpio_mode_response = fd(42, .{ .SubMessage = {} }),
            .write_bank_voltage_request = fd(43, .{ .SubMessage = {} }),
            .write_bank_voltage_response = fd(44, .{ .SubMessage = {} }),
            .usb_pd_read_temperature_request = fd(45, .{ .SubMessage = {} }),
            .usb_pd_read_temperature_response = fd(46, .{ .SubMessage = {} }),
        };
    };

    pub const _desc_table = .{
        .kind = fd(null, .{ .OneOf = kind_union }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};
